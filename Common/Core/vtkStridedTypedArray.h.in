// SPDX-FileCopyrightText: Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
// SPDX-License-Identifier: BSD-3-Clause
/**
 * @class   vtkStrided@VTK_TYPE_NAME@Array
 * @brief   strided implicit array of @CONCRETE_TYPE@.
 *
 * vtkStrided@VTK_TYPE_NAME@Array is an strided implicit array of values of type @CONCRETE_TYPE@.
 * see vtkStridedArray, vtkStridedImplicitBackend
 *
 * This file is generated by vtkTypeArrays.cmake
 */

#ifndef vtkStrided@VTK_TYPE_NAME@Array_h
#define vtkStrided@VTK_TYPE_NAME@Array_h

#include "vtkStridedArray.h"     // Real Superclass
#include "vtkCommonCoreModule.h" // For export macro
#include "vtkDataArray.h"

// Fake the superclass for the wrappers.
#ifndef __VTK_WRAP__
#define vtkDataArray vtkStridedArray<@CONCRETE_TYPE@>
#endif
VTK_ABI_NAMESPACE_BEGIN
class VTKCOMMONCORE_EXPORT vtkStrided@VTK_TYPE_NAME@Array : public vtkDataArray
{
public:
  vtkImplicitArrayTypeMacro(vtkStrided@VTK_TYPE_NAME@Array, vtkDataArray);
#ifndef __VTK_WRAP__
#undef vtkDataArray
#endif

  static vtkStrided@VTK_TYPE_NAME@Array* New();
  static vtkStrided@VTK_TYPE_NAME@Array* ExtendedNew();
  void PrintSelf(ostream& os, vtkIndent indent) override;

  // This macro expands to the set of method declarations that
  // make up the interface of vtkImplicitArray, which is ignored
  // by the wrappers.
#if defined(__VTK_WRAP__) || defined(__WRAP_GCCXML__)
  vtkCreateReadOnlyWrappedArrayInterface(@CONCRETE_TYPE@);
#endif

  /**
   * A faster alternative to SafeDownCast for downcasting vtkAbstractArrays.
   */
  static vtkStrided@VTK_TYPE_NAME@Array* FastDownCast(vtkAbstractArray* source)
  {
    return static_cast<vtkStrided@VTK_TYPE_NAME@Array*>(Superclass::FastDownCast(source));
  }

  ///@{
  /**
   * Set the parameters for the strided backend.
   */
  void ConstructBackend(const @CONCRETE_TYPE@* buffer, vtkIdType stride, int components, vtkIdType offset);
  void ConstructBackend(const @CONCRETE_TYPE@* buffer, vtkIdType stride, int components);
  void ConstructBackend(const @CONCRETE_TYPE@* buffer, vtkIdType stride);
  ///@}

protected:
  vtkStrided@VTK_TYPE_NAME@Array();
  ~vtkStrided@VTK_TYPE_NAME@Array() override;

private:
  typedef vtkStridedArray<@CONCRETE_TYPE@> RealSuperclass;

  vtkStrided@VTK_TYPE_NAME@Array(const vtkStrided@VTK_TYPE_NAME@Array&) = delete;
  void operator=(const vtkStrided@VTK_TYPE_NAME@Array&) = delete;
};

// Define vtkArrayDownCast implementation:
vtkArrayDownCast_FastCastMacro(vtkStrided@VTK_TYPE_NAME@Array);

VTK_ABI_NAMESPACE_END
#endif
// VTK-HeaderTest-Exclude: TYPEMACRO
